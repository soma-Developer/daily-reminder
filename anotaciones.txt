Conceptos Fundamentales de JavaScript para entender el archivo en bloques según el estudio realizado:



Fundamentos básicos:

Sintaxis básica

Variables (let, const)

Tipos de datos (strings, números, booleanos, objetos, arrays)

Operadores (asignación, comparación, lógicos)

Funciones:
Declaración de funciones

Arrow functions (() => {})

Parámetros y argumentos

Retorno de valores

Programación Orientada a Objetos (POO):
Clases y objetos

Constructor (parámetros)

Métodos y propiedades

this (contexto)




Fundamentos intermedios para estudiar y entender mejor el código:

Manejo del DOM (Document Object Model):
Selección de elementos (document.getElementById, querySelector)

Eventos (addEventListener)

Manipulación del DOM (innerHTML, value)

Almacenamiento local:
localStorage para guardar datos localmente

JSON.stringify() y JSON.parse()

Métodos de arrays:
map() — aún no comprendo del todo la sintaxis de este método

filter() — aún no comprendo del todo la sintaxis de este método

push()

join()

Manejo de eventos:
addEventListener

Eventos como 'click', 'change'

Template strings:
Uso de backticks (`) para strings multilínea

Interpolación de variables (${variable})

Conceptos específicos del código:
Clases y herencia:
El código utiliza clases (Reminder y ReminderManager) para que las frases tengan propiedades únicas y en común, como el texto y la prioridad.

Manejo de eventos:
Hay listeners para botones y cambios en selects.
Es necesario estudiar esta metodología de manipulación del DOM para entender mejor el código.

Persistencia de datos:
Uso de localStorage para guardar recordatorios.
La persistencia de datos es importante para evitar que los recordatorios se pierdan al cerrar el navegador. Si no se guardan, el usuario tendría que reescribirlos cada vez que abra la aplicación, lo cual es ineficiente.
— Hay que entender el concepto de persistencia de datos.

Renderizado dinámico:
Actualización de la interfaz de usuario basada en los datos.
El renderizado dinámico es importante para reflejar los cambios en la UI cuando los datos cambian. Si no se actualiza la interfaz, el usuario no podrá ver los cambios realizados.
— Hay que entender el concepto de renderizado dinámico.